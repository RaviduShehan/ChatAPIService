def readManifestFile(file) {
    return readFile(file).trim()
}

pipeline {
    agent any
    environment {
        DOCKERIMAGE = "${params.DOCKER_IMAGE_NAME}"
        kubeconfigId = "${params.KUBECONFIG_ID}"

        gkeClusterName = "openai-api-cluster"
        gkeZone = "us-central1-c"
        gkeCredentialsId = "apiservicesauth"
        DEPLOYMENT_ID="chatapi"
    }
    stages{
        stage('Get docker Image'){
            steps {
                script {
                    echo "Docker image name: ${DOCKERIMAGE}"
                    echo "DEPLOYMENT_ID: ${DEPLOYMENT_ID}"
                }
            }
        }
        stage('Deploy to Dev Environment') {
            steps {
                echo "Deploy to Dev Env"
                 script {
                    NAME = "dev"
                    def manifest = readManifestFile('chat.yml')
                    manifest = manifest.replaceAll('DEPLOYMENT_NAME', "${DEPLOYMENT_ID}")
                    manifest = manifest.replaceAll('NAMESPACE', "${NAME}")
                    manifest = manifest.replaceAll('dockerImageName',"${DOCKERIMAGE}")
                    writeFile file: 'chat.yml', text: manifest
                }
                step([
                    $class: 'KubernetesEngineBuilder',
                    projectId: 'apiservices-384122',
                    credentialsId: gkeCredentialsId,
                    clusterName: gkeClusterName,
                    location: gkeZone,
                    manifestPattern: 'chat.yml'
                ])
            }
        }
        stage('Deploy to Test Environment') {
            steps {
                script {
                    def deployApproved = false
                    while (!deployApproved) {
                        def inputMessage = "Deploy to Test Environment? (yes/no)"
                        def inputResult = input message: inputMessage, parameters: [string(defaultValue: 'no', description: '', name: 'deploy')]
                        if (inputResult.toLowerCase() == "yes") {
                            deployApproved = true
                        } else {
                            echo "Deployment to Test Environment not approved"
                            currentBuild.result = 'ABORTED'
                            error("Pipeline aborted: Deployment not approved")
                        }
                    }
                }
                script {
                    NAME = "test"
                    def manifest = readManifestFile('chat.yml')
                    manifest = manifest.replaceAll('DEPLOYMENT_NAME', "${DEPLOYMENT_ID}")
                    manifest = manifest.replaceAll('NAMESPACE',"${NAME}" )
                    manifest = manifest.replaceAll('dockerImageName',"${DOCKERIMAGE}")
                    writeFile file: 'chattest.yml', text: manifest
                }
                step([
                    $class: 'KubernetesEngineBuilder',
                    projectId: 'apiservices-384122',
                    credentialsId: gkeCredentialsId,
                    clusterName: gkeClusterName,
                    location: gkeZone,
                    manifestPattern: 'chattest.yml'
                ])
            }
        }
         stage('Deploy to Prod Environment') {
            steps {
                script {
                    def deployApproved = false
                    while (!deployApproved) {
                        def inputMessage = "Deploy to Prod Environment? (yes/no)"
                        def inputResult = input message: inputMessage, parameters: [string(defaultValue: 'no', description: '', name: 'deploy')]
                        if (inputResult.toLowerCase() == "yes") {
                            deployApproved = true
                        } else {
                            echo "Deployment to Prod Environment not approved"
                            currentBuild.result = 'ABORTED'
                            error("Pipeline aborted: Deployment not approved")
                        }
                    }
                }
                script {
                    NAME = "prod"
                    def manifest = readManifestFile('chat.yml')
                    manifest = manifest.replaceAll('DEPLOYMENT_NAME', "${DEPLOYMENT_ID}")
                    manifest = manifest.replaceAll('NAMESPACE', "${NAME}")
                    manifest = manifest.replaceAll('dockerImageName',"${DOCKERIMAGE}")
                    writeFile file: 'chatprod.yml', text: manifest
                }
                step([
                    $class: 'KubernetesEngineBuilder',
                    projectId: 'apiservices-384122',
                    credentialsId: gkeCredentialsId,
                    clusterName: gkeClusterName,
                    location: gkeZone,
                    manifestPattern: 'chatprod.yml'
                ])
            }
    }
}
}